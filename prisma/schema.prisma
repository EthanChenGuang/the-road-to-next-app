// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String           @id @default(cuid())
  username       String           @unique
  email          String           @unique
  passwordHash   String
  sessions       Session[]
  tickets        Ticket[]
  comments       Comment[]
  commentHistory CommentHistory[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Ticket {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  title     String
  content   String       @db.VarChar(1024)
  status    TicketStatus @default(OPEN)
  deadline  String
  bounty    Int
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]

  @@index([userId])
}

model Comment {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String   @db.VarChar(2048)
  ticketId   String
  userId     String?
  isEdited   Boolean  @default(false)
  editCount  Int      @default(0)
  lastEditAt DateTime?
  ticket     Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  history    CommentHistory[]

  @@index([ticketId])
  @@index([userId])
}

model CommentHistory {
  id         String    @id @default(uuid())
  commentId  String
  content    String    @db.VarChar(2048)
  version    Int
  editedAt   DateTime  @default(now())
  editedBy   String?
  changeType String    @default("UPDATE")
  comment    Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user       User?     @relation(fields: [editedBy], references: [id], onDelete: SetNull)

  @@index([commentId])
  @@index([editedBy])
  @@unique([commentId, version])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}
